'10' = select(., c3:c1) %>% rowSums(na.rm = TRUE),
'12' = select(., c2:c1) %>% rowSums(na.rm = TRUE),
'14' = c1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by( datetime, vote) %>%
dplyr:::summarise( probability = mean (probability))
cs_intrapolation <- crossing(datetime = unique(cs_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(cs_set_long) %>%
group_by(datetime, probability) %>%
dplyr::summarise(vote= first(vote)) %>%
arrange(datetime, probability) %>%
dplyr::group_by(datetime) %>%
dplyr:: mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
dplyr:: select(-vote, cs=vote_)
pp_set <- predi10n %>%
filter(set_id== "pp_set")
pp_set_long <- pp_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'17' = select(., c4:c1) %>% rowSums(na.rm = TRUE),
'20' = select(., c3:c1) %>% rowSums(na.rm = TRUE),
'23' = select(., c2:c1) %>% rowSums(na.rm = TRUE),
'26' = c1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by( datetime, vote) %>%
dplyr:::summarise( probability = mean (probability))
pp_intrapolation <- crossing(datetime = unique(pp_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(pp_set_long) %>%
group_by(datetime, probability) %>%
dplyr::summarise(vote= first(vote)) %>%
arrange(datetime, probability) %>%
dplyr::group_by(datetime) %>%
dplyr:: mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
dplyr::  select(-vote, pp=vote_)
mp_set <- predi10n %>%
filter(set_id== "mp_set")
mp_set_long <- mp_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'3' = select(., c4:c1) %>% rowSums(na.rm = TRUE),
'5' = select(., c3:c1) %>% rowSums(na.rm = TRUE),
'7' = select(., c2:c1) %>% rowSums(na.rm = TRUE),
'9' = c1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by( datetime, vote) %>%
dplyr:::summarise( probability = mean (probability))
mp_intrapolation <- crossing(datetime = unique(mp_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(mp_set_long) %>%
group_by(datetime, probability) %>%
dplyr::summarise(vote= first(vote)) %>%
arrange(datetime, probability) %>%
dplyr:: group_by(datetime) %>%
dplyr:: mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
dplyr::  select(-vote, mp=vote_)
psoe_set <- predi10n %>%
filter(set_id== "psoe_set")
psoe_set_long <- psoe_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'23' = select(., c4:c1) %>% rowSums(na.rm = TRUE),
'26' = select(., c3:c1) %>% rowSums(na.rm = TRUE),
'29' = select(., c2:c1) %>% rowSums(na.rm = TRUE),
'32' = c1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by( datetime, vote) %>%
dplyr:::summarise( probability = mean (probability))
psoe_intrapolation <- crossing(datetime = unique(psoe_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(psoe_set_long) %>%
group_by(datetime, probability) %>%
dplyr::summarise(vote= first(vote)) %>%
arrange(datetime, probability) %>%
dplyr:: group_by(datetime) %>%
dplyr:: mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
dplyr:: select(-vote, psoe=vote_)
otherparties_set <- predi10n %>%
filter(set_id== "otherparties_set")
otherparties_set_long <- otherparties_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'11' = select(., c4:c1) %>% rowSums(na.rm = TRUE),
'13' = select(., c3:c1) %>% rowSums(na.rm = TRUE),
'15' = select(., c2:c1) %>% rowSums(na.rm = TRUE),
'17' = c1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by( datetime, vote) %>%
dplyr:::summarise( probability = mean (probability))
otherparties_intrapolation <- crossing(datetime = unique(otherparties_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(otherparties_set_long) %>%
group_by(datetime, probability) %>%
dplyr::summarise(vote= first(vote)) %>%
arrange(datetime, probability) %>%
dplyr:: group_by(datetime) %>%
dplyr::  mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
dplyr::  select(-vote, otherparties=vote_)
intrapolation_all <- full_join(up_intrapolation, vox_intrapolation, by = c("datetime", "probability")) %>%
full_join(., cs_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., pp_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., psoe_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., mp_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., otherparties_intrapolation, by=c('datetime', 'probability')) %>%
distinct()
intrapolation_inner <- inner_join(up_intrapolation, vox_intrapolation, by = c("datetime", "probability")) %>%
inner_join(., cs_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., pp_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., psoe_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., mp_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., otherparties_intrapolation, by=c('datetime', 'probability')) %>%
distinct()
#####VOTO
intrapolation_reduce <- intrapolation_all %>%
filter(probability=="50") %>%
select(-probability) %>%
ungroup() %>%
mutate_if(is.numeric, round, 2) %>%
mutate(datetime2 = as.Date(datetime, 'd%.m%.Y%')) %>%
arrange(datetime2) %>%
fill(., everything())
intrapolation_little <- intrapolation_all %>%
ungroup(datetime) %>%
filter(probability=="50") %>%
ungroup() %>%
mutate(datetime2 = as.Date(datetime, 'd%.m%.Y%')) %>%
arrange(datetime2) %>%
fill(., everything()) %>%
select(datetime2, `Unidas Podemos`= "up", VOX="vox", Ciudadanos="cs", PP="pp", PSOE="psoe", `Más País`="mp") %>%
gather("party", "vote", c(`Unidas Podemos`:`Más País`)) %>%
group_by(party) %>%
mutate(diff = vote - lag(vote, default = first(vote))) %>%
filter(datetime2 == max(datetime2)) %>%
mutate_if(is.numeric, round, 2) %>%
select(party, vote, diff) %>%
arrange(desc(vote))
intrapolation_gather <- intrapolation_reduce %>%
select(datetime, UP= "up", VOX="vox", Cs="cs", PP="pp", PSOE="psoe") %>%
gather("party", "vote", c('UP':'PSOE'))
#GOBIERNO
generales_reduce <- generales_set %>%
mutate(datetime = round_date(datetime, unit="24 hours")) %>%
group_by(datetime) %>%
mutate_all(list(mean=mean)) %>%
select(-c(2:8)) %>%
distinct() %>%
select(coalition_left= coalition_left_mean,
coalition_center=coalition_center_mean,
coalition_right=coalition_right_mean,
singlecolor_left=singlecolor_left_mean,
singlecolor_center=singlecolor_center_mean,
singlecolor_right=singlecolor_right_mean,
repetition_elections=rep_elections_mean) %>%
mutate_if(is.numeric, round, 2) %>%
mutate(datetime2 = as.Date(datetime, 'd%.m%.Y%'))
generales_little <- generales_reduce %>%
ungroup(datetime) %>%
select(datetime, `Gobierno de coalición de izquierdas`= "coalition_left", `Gobierno de coalición de centro`="coalition_center", `Gobierno de coalición de derechas`="coalition_right", `Gobierno monocolor de izquierdas`="singlecolor_left", `Gobierno monocolor de centro`="singlecolor_center", `Gobierno monocolor de derechas`="singlecolor_right", `Repetición de elecciones`="repetition_elections") %>%
gather("type", "prob", c(`Gobierno de coalición de izquierdas`:`Repetición de elecciones`)) %>%
mutate(diff =  prob - lag(prob, default = first(prob))) %>%
filter(datetime == max(datetime)) %>%
mutate_if(is.numeric, round, 2) %>%
select(type, prob, diff) %>%
arrange(desc(prob))
generales_gather <- generales_reduce %>% select(datetime, `Coalición de izquierda`= "coalition_left", `Coalición de centro`="coalition_center", `Coalición de derecha`="coalition_right", `Monocolor de izquierda`="singlecolor_left", `Monocolor de centro`="singlecolor_center", `Monocolor de derecha`="singlecolor_right", `Repetición electoral`="repetition_elections") %>%
gather("type", "prob", c(`Coalición de izquierda`:`Repetición electoral`))
coalimono <- generales_reduce %>%
ungroup() %>%
mutate(`Gob. coalición`= rowSums(select(., coalition_center, coalition_left, coalition_right)),
`Gob. monocolor`= rowSums(select(., singlecolor_left, singlecolor_center, singlecolor_right)),
`Repetición electoral`=repetition_elections) %>%
select(`Gob. coalición`, `Gob. monocolor`, `Repetición electoral`, datetime, datetime2)%>%
gather("type", "prob", c(`Gob. coalición`:`Repetición electoral`))
rightleft <- generales_reduce %>%
ungroup() %>%
mutate(`G. derecha`= rowSums(select(., coalition_right, singlecolor_right)),
`G. izquierda`= rowSums(select(., singlecolor_left, coalition_left)),
`G. centro`= rowSums(select(., singlecolor_center, coalition_center))) %>%
select(`G. derecha`, `G. izquierda`, `G. centro`, datetime, datetime2)%>%
gather("type", "prob", c(`G. derecha`:`G. centro`))
###funcionamiento-ejemplo
`Contratos de voto al PP` <- c("Contrato A", "Contrato B", "Contrato C", "Contrato D", "Contrato E")
`Margen de estimación de voto al PP` <- c("17% votos o menos", "17%-19'99% votos", "20%-22'99% votos", "23%-25'99% votos", "26% votos o más")
`Probabilidad de cada contrato (ejemplo)` <- c("10%", "20%", "40%", "20%", "10%")
Ejemplo <- as.data.frame(cbind(`Contratos de voto al PP`, `Margen de estimación de voto al PP`, `Probabilidad de cada contrato (ejemplo)`))
`Estimación de voto al PP` <- c("100% de votos", "> 26% de votos", "> 23% de votos", "21% de votos", "> 20% de votos", "> 17% de votos", "> 0% de votos")
`Probabilidad acumulada` <- c("0%", "10%", "30%", "50%", "70%", "90%", "100%")
`Agregación` <- c("Ninguno",
"Contrato E",
"Contrato D + Contrato E",
"Resultado de la interpolación",
"Contrato C + Contrato D + Contrato E",
"Contrato B + Contrato C +  Contrato D + Contrato E",
"Contrato A + Contrato B + Contrato C + Contrato D + Contrato E")
Ejemplo_2 <- as.data.frame(cbind(`Estimación de voto al PP`, `Probabilidad acumulada`, `Agregación`))
x <- c(100, 26, 23, NA, 20, 17, 0)
y <- c(0, 10, 30, 50, 70, 90, 100)
Ejemplo_3 <- as.data.frame(cbind(x, y))
Ejemplo_3$vote_ = coalesce(as.numeric(x), na.approx(x, y))
index_graph %>%
hchart(., type = "column",
hcaes(x = set_id,
y = prob,
group = type,
color = coloract)) %>%
hc_plotOptions(column = list(stacking = "normal")) %>%
hc_yAxis(max = 100) %>%
hc_xAxis(title = list(text = "")) %>%
hc_yAxis(title = list(text = "Probabilidad estimada")) %>%
hc_legend(enabled = F)
install.packages("ggthemes")
myColors_gen <- c("#0000BA", "#9A0000", "#A9A9A9", "#C57420", "#FF3827", "#FF9300", "#04AAFF")
library(DT)
datatable(head(generales_little, 4), rownames=FALSE, colnames = c('Tipo de gobierno', 'Probabilidad', 'Tendencia'), extensions = 'FixedColumns',
options = list( dom= "t",
scrollX = FALSE,
fixedColumns = TRUE,
scrollCollapse = TRUE, pageLength = 10
)) %>%
formatStyle(
'diff',
color = styleInterval(c(-0.001, 0.001), c('red', 'black', 'green'))
) %>%
formatStyle('type', fontWeight = 'bold')
datatable(intrapolation_little, rownames=FALSE, colnames = c('Partido', 'Voto', 'Tendencia'), extensions = 'FixedColumns',
options = list(
dom = 'r',
scrollX = TRUE,
fixedColumns = TRUE, pageLength = 10
)) %>%
formatStyle(
'diff',
color = styleInterval(c(-0.001, 0.001), c('red', 'black', 'green'))
) %>%
formatStyle('party', fontWeight = 'bold')
highchart() %>%
hc_xAxis(categories = intrapolation_reduce$datetime2, tickInterval = 1) %>%
hc_add_series(name = "PSOE", data = intrapolation_reduce$psoe, color = "#E9202C") %>%
hc_add_series(name = "PP", data = intrapolation_reduce$pp, color= "#0387D5") %>%
hc_add_series(name = "Ciudadanos", data = intrapolation_reduce$cs, color = "#FA5000") %>%
hc_add_series(name = "Unidas Podemos", data = intrapolation_reduce$up, color= "#672F6C") %>%
hc_add_series(name = "VOX", data = intrapolation_reduce$vox, color= "#32CD32") %>%
hc_add_series(name = "Más País", data = intrapolation_reduce$mp, color= "#5ab4ac") %>%
hc_tooltip(crosshairs = TRUE, backgroundColor = "#FBFEFF",
shared = TRUE, borderWidth = 0, sort = TRUE,  table = TRUE)
View(pp_set)
View(vox_set)
View(cs_set)
View(mp_set)
View(psoe_set)
View(up_set)
View(otherparties_set)
pp_set <- predi10n %>%
filter(set_id== "pp_set") %>%
mutate(co1=c4, co2=c1, co3=c2, co4=c3, co5=c5)
pp_set_long <- pp_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'17' = select(., co4:co1) %>% rowSums(na.rm = TRUE),
'20' = select(., co3:co1) %>% rowSums(na.rm = TRUE),
'23' = select(., co2:co1) %>% rowSums(na.rm = TRUE),
'26' = co1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by( datetime, vote) %>%
dplyr:::summarise( probability = mean (probability))
pp_intrapolation <- crossing(datetime = unique(pp_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(pp_set_long) %>%
group_by(datetime, probability) %>%
dplyr::summarise(vote= first(vote)) %>%
arrange(datetime, probability) %>%
dplyr::group_by(datetime) %>%
dplyr:: mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
dplyr::  select(-vote, pp=vote_)
View(pp_intrapolation)
mp_set <- predi10n %>%
filter(set_id== "mp_set")%>%
mutate(co1=c3, co2=c1, co3=c2, co4=c5, co5=c4)
mp_set_long <- mp_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'3' = select(., co4:co1) %>% rowSums(na.rm = TRUE),
'5' = select(., co3:co1) %>% rowSums(na.rm = TRUE),
'7' = select(., co2:co1) %>% rowSums(na.rm = TRUE),
'9' = co1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by( datetime, vote) %>%
dplyr:::summarise( probability = mean (probability))
mp_intrapolation <- crossing(datetime = unique(mp_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(mp_set_long) %>%
group_by(datetime, probability) %>%
dplyr::summarise(vote= first(vote)) %>%
arrange(datetime, probability) %>%
dplyr:: group_by(datetime) %>%
dplyr:: mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
dplyr::  select(-vote, mp=vote_)
View(mp_set)
View(mp_intrapolation)
View(mp_set)
psoe_set <- predi10n %>%
filter(set_id== "psoe_set") %>%
mutate(co1=c3, co2=c2, co3=c4, co4=c1, co5=c5)
psoe_set_long <- psoe_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'23' = select(., co4:co1) %>% rowSums(na.rm = TRUE),
'26' = select(., co3:co1) %>% rowSums(na.rm = TRUE),
'29' = select(., co2:co1) %>% rowSums(na.rm = TRUE),
'32' = co1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by( datetime, vote) %>%
dplyr:::summarise( probability = mean (probability))
psoe_intrapolation <- crossing(datetime = unique(psoe_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(psoe_set_long) %>%
group_by(datetime, probability) %>%
dplyr::summarise(vote= first(vote)) %>%
arrange(datetime, probability) %>%
dplyr:: group_by(datetime) %>%
dplyr:: mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
dplyr:: select(-vote, psoe=vote_)
View(otherparties_set)
otherparties_set <- predi10n %>%
filter(set_id== "otherparties_set")%>%
mutate(co1=c2, co2=c4, co3=c5, co4=c3, co5=c1)
otherparties_set_long <- otherparties_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'11' = select(., co4:co1) %>% rowSums(na.rm = TRUE),
'13' = select(., co3:co1) %>% rowSums(na.rm = TRUE),
'15' = select(., co2:co1) %>% rowSums(na.rm = TRUE),
'17' = co1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by( datetime, vote) %>%
dplyr:::summarise( probability = mean (probability))
otherparties_intrapolation <- crossing(datetime = unique(otherparties_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(otherparties_set_long) %>%
group_by(datetime, probability) %>%
dplyr::summarise(vote= first(vote)) %>%
arrange(datetime, probability) %>%
dplyr:: group_by(datetime) %>%
dplyr::  mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
dplyr::  select(-vote, otherparties=vote_)
intrapolation_all <- full_join(up_intrapolation, vox_intrapolation, by = c("datetime", "probability")) %>%
full_join(., cs_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., pp_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., psoe_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., mp_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., otherparties_intrapolation, by=c('datetime', 'probability')) %>%
distinct()
intrapolation_inner <- inner_join(up_intrapolation, vox_intrapolation, by = c("datetime", "probability")) %>%
inner_join(., cs_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., pp_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., psoe_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., mp_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., otherparties_intrapolation, by=c('datetime', 'probability')) %>%
distinct()
#####VOTO
intrapolation_reduce <- intrapolation_all %>%
filter(probability=="50") %>%
select(-probability) %>%
ungroup() %>%
mutate_if(is.numeric, round, 2) %>%
mutate(datetime2 = as.Date(datetime, 'd%.m%.Y%')) %>%
arrange(datetime2) %>%
fill(., everything())
intrapolation_little <- intrapolation_all %>%
ungroup(datetime) %>%
filter(probability=="50") %>%
ungroup() %>%
mutate(datetime2 = as.Date(datetime, 'd%.m%.Y%')) %>%
arrange(datetime2) %>%
fill(., everything()) %>%
select(datetime2, `Unidas Podemos`= "up", VOX="vox", Ciudadanos="cs", PP="pp", PSOE="psoe", `Más País`="mp") %>%
gather("party", "vote", c(`Unidas Podemos`:`Más País`)) %>%
group_by(party) %>%
mutate(diff = vote - lag(vote, default = first(vote))) %>%
filter(datetime2 == max(datetime2)) %>%
mutate_if(is.numeric, round, 2) %>%
select(party, vote, diff) %>%
arrange(desc(vote))
intrapolation_gather <- intrapolation_reduce %>%
select(datetime, UP= "up", VOX="vox", Cs="cs", PP="pp", PSOE="psoe") %>%
gather("party", "vote", c('UP':'PSOE'))
#GOBIERNO
generales_reduce <- generales_set %>%
mutate(datetime = round_date(datetime, unit="24 hours")) %>%
group_by(datetime) %>%
mutate_all(list(mean=mean)) %>%
select(-c(2:8)) %>%
distinct() %>%
select(coalition_left= coalition_left_mean,
coalition_center=coalition_center_mean,
coalition_right=coalition_right_mean,
singlecolor_left=singlecolor_left_mean,
singlecolor_center=singlecolor_center_mean,
singlecolor_right=singlecolor_right_mean,
repetition_elections=rep_elections_mean) %>%
mutate_if(is.numeric, round, 2) %>%
mutate(datetime2 = as.Date(datetime, 'd%.m%.Y%'))
generales_little <- generales_reduce %>%
ungroup(datetime) %>%
select(datetime, `Gobierno de coalición de izquierdas`= "coalition_left", `Gobierno de coalición de centro`="coalition_center", `Gobierno de coalición de derechas`="coalition_right", `Gobierno monocolor de izquierdas`="singlecolor_left", `Gobierno monocolor de centro`="singlecolor_center", `Gobierno monocolor de derechas`="singlecolor_right", `Repetición de elecciones`="repetition_elections") %>%
gather("type", "prob", c(`Gobierno de coalición de izquierdas`:`Repetición de elecciones`)) %>%
mutate(diff =  prob - lag(prob, default = first(prob))) %>%
filter(datetime == max(datetime)) %>%
mutate_if(is.numeric, round, 2) %>%
select(type, prob, diff) %>%
arrange(desc(prob))
generales_gather <- generales_reduce %>% select(datetime, `Coalición de izquierda`= "coalition_left", `Coalición de centro`="coalition_center", `Coalición de derecha`="coalition_right", `Monocolor de izquierda`="singlecolor_left", `Monocolor de centro`="singlecolor_center", `Monocolor de derecha`="singlecolor_right", `Repetición electoral`="repetition_elections") %>%
gather("type", "prob", c(`Coalición de izquierda`:`Repetición electoral`))
coalimono <- generales_reduce %>%
ungroup() %>%
mutate(`Gob. coalición`= rowSums(select(., coalition_center, coalition_left, coalition_right)),
`Gob. monocolor`= rowSums(select(., singlecolor_left, singlecolor_center, singlecolor_right)),
`Repetición electoral`=repetition_elections) %>%
select(`Gob. coalición`, `Gob. monocolor`, `Repetición electoral`, datetime, datetime2)%>%
gather("type", "prob", c(`Gob. coalición`:`Repetición electoral`))
rightleft <- generales_reduce %>%
ungroup() %>%
mutate(`G. derecha`= rowSums(select(., coalition_right, singlecolor_right)),
`G. izquierda`= rowSums(select(., singlecolor_left, coalition_left)),
`G. centro`= rowSums(select(., singlecolor_center, coalition_center))) %>%
select(`G. derecha`, `G. izquierda`, `G. centro`, datetime, datetime2)%>%
gather("type", "prob", c(`G. derecha`:`G. centro`))
###funcionamiento-ejemplo
`Contratos de voto al PP` <- c("Contrato A", "Contrato B", "Contrato C", "Contrato D", "Contrato E")
`Margen de estimación de voto al PP` <- c("17% votos o menos", "17%-19'99% votos", "20%-22'99% votos", "23%-25'99% votos", "26% votos o más")
`Probabilidad de cada contrato (ejemplo)` <- c("10%", "20%", "40%", "20%", "10%")
Ejemplo <- as.data.frame(cbind(`Contratos de voto al PP`, `Margen de estimación de voto al PP`, `Probabilidad de cada contrato (ejemplo)`))
`Estimación de voto al PP` <- c("100% de votos", "> 26% de votos", "> 23% de votos", "21% de votos", "> 20% de votos", "> 17% de votos", "> 0% de votos")
`Probabilidad acumulada` <- c("0%", "10%", "30%", "50%", "70%", "90%", "100%")
`Agregación` <- c("Ninguno",
"Contrato E",
"Contrato D + Contrato E",
"Resultado de la interpolación",
"Contrato C + Contrato D + Contrato E",
"Contrato B + Contrato C +  Contrato D + Contrato E",
"Contrato A + Contrato B + Contrato C + Contrato D + Contrato E")
Ejemplo_2 <- as.data.frame(cbind(`Estimación de voto al PP`, `Probabilidad acumulada`, `Agregación`))
x <- c(100, 26, 23, NA, 20, 17, 0)
y <- c(0, 10, 30, 50, 70, 90, 100)
Ejemplo_3 <- as.data.frame(cbind(x, y))
Ejemplo_3$vote_ = coalesce(as.numeric(x), na.approx(x, y))
highchart() %>%
hc_xAxis(categories = intrapolation_reduce$datetime2, tickInterval = 1) %>%
hc_add_series(name = "PSOE", data = intrapolation_reduce$psoe, color = "#E9202C") %>%
hc_add_series(name = "PP", data = intrapolation_reduce$pp, color= "#0387D5") %>%
hc_add_series(name = "Ciudadanos", data = intrapolation_reduce$cs, color = "#FA5000") %>%
hc_add_series(name = "Unidas Podemos", data = intrapolation_reduce$up, color= "#672F6C") %>%
hc_add_series(name = "VOX", data = intrapolation_reduce$vox, color= "#32CD32") %>%
hc_add_series(name = "Más País", data = intrapolation_reduce$mp, color= "#5ab4ac") %>%
hc_tooltip(crosshairs = TRUE, backgroundColor = "#FBFEFF",
shared = TRUE, borderWidth = 0, sort = TRUE,  table = TRUE)
datatable(intrapolation_little, rownames=FALSE, colnames = c('Partido', 'Voto', 'Tendencia'), extensions = 'FixedColumns',
options = list(
dom = 'r',
scrollX = TRUE,
fixedColumns = TRUE, pageLength = 10
)) %>%
formatStyle(
'diff',
color = styleInterval(c(-0.001, 0.001), c('red', 'black', 'green'))
) %>%
formatStyle('party', fontWeight = 'bold')
datatable(head(generales_little, 4), rownames=FALSE, colnames = c('Tipo de gobierno', 'Probabilidad', 'Tendencia'), extensions = 'FixedColumns',
options = list( dom= "t",
scrollX = FALSE,
fixedColumns = TRUE,
scrollCollapse = TRUE, pageLength = 10
)) %>%
formatStyle(
'diff',
color = styleInterval(c(-0.001, 0.001), c('red', 'black', 'green'))
) %>%
formatStyle('type', fontWeight = 'bold')
highchart() %>%
hc_xAxis(categories = generales_reduce$datetime2, tickInterval = 1) %>%
hc_add_series(name = "Gobierno de coalición de izquierdas", data = generales_reduce$coalition_left , color = "#9A0000") %>%
hc_add_series(name = "Gobierno de coalición de centro", data = generales_reduce$coalition_center, color= "#C57420") %>%
hc_add_series(name = "Gobierno de coalición de derechas", data = generales_reduce$coalition_right, color = "#0000BA") %>%
hc_add_series(name = "Gobierno monocolor de izquierdas", data = generales_reduce$singlecolor_left, color= "#FF3827") %>%
hc_add_series(name = "Gobierno monocolor de centro", data = generales_reduce$singlecolor_center, color= "#FF9300") %>%
hc_add_series(name = "Gobierno monocolor de derechas", data = generales_reduce$singlecolor_right, color= "#04AAFF") %>%
hc_add_series(name = "Otro gobierno o repetición electoral", data = generales_reduce$repetition_elections, color= "#A9A9A9")   %>%
hc_tooltip(crosshairs = TRUE, backgroundColor = "#FBFEFF",
shared = TRUE, borderWidth = 0, sort = TRUE,  table = TRUE)
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi")
#render your sweet site.
rmarkdown::render_site()
