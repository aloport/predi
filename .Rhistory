italy <- italy %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%     # expand list column
spread(target, segment)
sweden <- sweden %>%
mutate(targets = if_else(stringi::stri_detect_regex(targets, "^\\s*\\{"), targets, NA_character_)) %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%
group_by(!!!lapply(setdiff(colnames(.), "segment"), rlang::parse_quosure)) %>%
dplyr::summarise(segment = first(segment)) %>%
spread(target, segment)
View(austria)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code")
sweden_r <-read_csv("sv-SE-fixed.csv")
sweden_r2 <- sweden_r %>% select(
message, created_at,
political_probability,
targets, advertiser, title) %>% mutate(id = rownames(sweden_r))
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
sweden_r2$message <- cleanFun(sweden_r2$message)
###
sweden_r2 <- sweden_r2 %>% mutate(
election_day = "2018-09-09")
##
sweden_r2$created_at = as.character(as.Date(sweden_r2$created_at, format = "%Y-%m-%d"))
##
write.csv(sweden_r2, "sweden_fix_clean.csv")
#######combine
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
sweden_r <- read.csv("sweden_fix_clean.csv")
ads <- read.csv("ads_3.csv")
View(ads)
ads <- ads %>%
filter(id!= "sweden")
View(ads)
ads$created_at = as.character(as.Date(ads$created_at, format = "%d.%m.%y"))
View(ads)
ads$election_day = as.character(as.Date(ads$election_day, format = "%d.%m.%y"))
View(ads)
#######combine
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
sweden_r <- read.csv("sweden_fix_clean.csv")
ads <- read.csv("ads_3.csv")
View(ads)
sweden_r <- sweden_r %>%
mutate(id = "sweden")
####
ads_2 <- rbind(sweden_r, ads)
ads_2 <- ads_2 %>%
filter(id!= "other")
write.csv(ads_2, "ads_2.csv")
View(ads_2)
View(ads)
View(ads)
View(austria)
######### O P M ##########
#PAPER 1
##########################
#rm(sweden_2, sweden_l, xx)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
ads <-read_csv("ads_2.csv")
austria <- ads %>%
filter(id == "austria")
germany <- ads %>%
filter(id == "germany")
italy <- ads %>%
filter(id == "italy")
sweden <- ads %>%
filter(id == "sweden")
View(austria)
#austria
##########################
austria <- austria %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%     # expand list column
spread(target, segment)
#germany
##########################
germany <- germany %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%     # expand list column
spread(target, segment)
#italy
##########################
italy <- italy %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%     # expand list column
spread(target, segment)
sweden <- sweden %>%
mutate(targets = if_else(stringi::stri_detect_regex(targets, "^\\s*\\{"), targets, NA_character_)) %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%
group_by(!!!lapply(setdiff(colnames(.), "segment"), rlang::parse_quosure)) %>%
dplyr::summarise(segment = first(segment)) %>%
spread(target, segment)
View(austria)
#Load the package
library(deeplr)
#Load the package
library(deeplr)
#Load the package
library(deeplr)
#Load the package
library(deeplr)
#Load the package
library(deeplr)
#Load the package
library(deeplr)
translator1 <- function(t) {
if(!is.na(t)) {
tryCatch(
translate(text = t, target_lang = "EN", auth_key = "ad18d826-7a2e-ef69-c94a-456b0318d936"),
error = function(e) {
futile.logger::flog.error(paste(e, t))
NA_character_
})
} else {
NA_character_
}
}
translator1 <- function(t) {
if(!is.na(t)) {
tryCatch(
translate(text = t, target_lang = "EN", auth_key = "ad18d826-7a2e-ef69-c94a-456b0318d936"),
error = function(e) {
futile.logger::flog.error(paste(e, t))
NA_character_
})
} else {
NA_character_
}
}
#translating the messages and targets
austria <- austria %>% mutate_at(.vars = vars(c(3, 10:20)),
.funs = funs(map_chr(., translator1)))
germany <- germany %>% mutate_at(.vars = vars(c(3, 10:20)),
.funs = funs(map_chr(., translator1)))
italy <- italy %>% mutate_at(.vars = vars(c(3, 10:21)),
.funs = funs(map_chr(., translator1)))
View(italy)
View(austria)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Translated/")
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Translated/")
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Translated/")
write_csv(austria, "austria_tr.csv")
write_csv(germany, "germany_tr.csv")
write_csv(italy, "italy_tr.csv")
View(sweden)
######### O P M ##########
#PAPER 1
##########################
#rm(sweden_2, sweden_l, xx)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
ads <-read_csv("ads_2.csv")
sweden <- ads %>%
filter(id == "sweden")
View(sweden)
sweden <- sweden %>%
mutate(targets = if_else(stringi::stri_detect_regex(targets, "^\\s*\\{"), targets, NA_character_)) %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%
group_by(!!!lapply(setdiff(colnames(.), "segment"), rlang::parse_quosure)) %>%
dplyr::summarise(segment = first(segment)) %>%
spread(target, segment)
View(sweden)
######### O P M ##########
#PAPER 1
##########################
#rm(sweden_2, sweden_l, xx)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
ads <-read_csv("ads_2.csv")
sweden <- ads %>%
filter(id == "sweden")
######### O P M ##########
#PAPER 1
##########################
#rm(sweden_2, sweden_l, xx)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
ads <-read_csv("ads_2.csv")
sweden <- ads %>%
filter(id == "sweden")
View(sweden)
######### O P M ##########
#PAPER 1
##########################
#rm(sweden_2, sweden_l, xx)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
ads <-read_csv("ads_3.csv")
austria <- ads %>%
filter(id == "austria")
sweden <- ads %>%
filter(id == "sweden")
sweden <- sweden %>%
mutate(targets = if_else(stringi::stri_detect_regex(targets, "^\\s*\\{"), targets, NA_character_)) %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%
group_by(!!!lapply(setdiff(colnames(.), "segment"), rlang::parse_quosure)) %>%
dplyr::summarise(segment = first(segment)) %>%
spread(target, segment)
write_csv(sweden, "sweden_notr.csv")
######
austria_tr <-read_csv("austria_tr.csv")
#open
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Translated/")
######
austria_tr <-read_csv("austria_tr.csv")
germany_tr <-read_csv("germany_tr.csv")
italy_tr <-read_csv("italy_tr.csv")
sweden_notr <-read_csv("sweden_notr.csv")
######### O P M ##########
#PAPER 1
##########################
#rm(sweden_2, sweden_l, xx)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
ads <-read_csv("ads_3.csv")
sweden <- ads %>%
filter(id == "sweden")
sweden <- sweden %>%
mutate(targets = if_else(stringi::stri_detect_regex(targets, "^\\s*\\{"), targets, NA_character_)) %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%
group_by(!!!lapply(setdiff(colnames(.), "segment"), rlang::parse_quosure)) %>%
dplyr::summarise(segment = first(segment)) %>%
spread(target, segment)
write_csv(sweden, "sweden_notr.csv")
rm(sweden)
sweden_notr <-read_csv("sweden_notr.csv")
#Load the package
install.packages('googleLanguageR')
library(googleLanguageR)
gl_auth("OPM.json")
setwd("~/")
setwd("~/")
gl_auth("OPM.json")
#Load the package
install.packages('memoise')
install.packages("memoise")
gl_translate_ <- memoise(gl_translate_)
library(memoise)
gl_translate_ <- memoise(gl_translate_)
gl_translate_ <- memoise(gl_translate)
gl_translate_delay <- function(source, target, delay) {
function (text) {
Sys.sleep(delay)
gl_translate_(text, source = source, target = target)$translatedText
}
}
gl_translate_delay_3_sv_en <-gl_translate_delay("sv", "en", 3)
gl_translate_delay <- function(text, source, target, delay) {
function (text) {
Sys.sleep(delay)
if(is.na(text)) {
NA_character_
} else {
gl_translate_(text, source = source, target = target)$translatedText
}
}
}
sweden_notr_2 <- sweden_notr %>% slice(1:20)
sweden_notr_2 <- map_chr(sweden_notr_2$message, gl_translate_delay_3_sv_en)
View(sweden_notr)
######### O P M ##########
#PAPER 1
##########################
#rm(sweden_2, sweden_l, xx)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
ads <-read_csv("ads_3.csv")
sweden <- ads %>%
filter(id == "sweden")
View(sweden)
sweden_r <- read.csv("sweden_fix_clean.csv")
sweden_r <- sweden_r %>%
mutate(id = "sweden")
ads <- read.csv("ads_3.csv")
ads <- ads %>%
filter(id!= "sweden")
####
ads_2 <- rbind(sweden_r, ads)
View(ads_2)
ads_2 <- ads_2 %>%
filter(id!= "other")
#######combine
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
write.csv(ads_2, "ads_2.csv")
######### O P M ##########
#PAPER 1
##########################
#rm(sweden_2, sweden_l, xx)
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
ads <-read_csv("ads_2.csv")
sweden <- ads %>%
filter(id == "sweden")
View(sweden)
sweden <- sweden %>%
mutate(targets = if_else(stringi::stri_detect_regex(targets, "^\\s*\\{"), targets, NA_character_)) %>%
mutate(targets = map(targets, ~if (is.na(.x)) {    # iterate, create list column
tibble(target = 'Age')    # what to return for NAs
} else {
jsonlite::fromJSON(paste0('[', .x, ']'))    # parse fixed JSON
})) %>%
unnest() %>%
group_by(!!!lapply(setdiff(colnames(.), "segment"), rlang::parse_quosure)) %>%
dplyr::summarise(segment = first(segment)) %>%
spread(target, segment)
write_csv(sweden, "sweden_notr.csv")
#Load the file
setwd("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/Code/")
sweden_notr <-read_csv("sweden_notr.csv")
View(sweden_notr)
#Load the package
library(googleLanguageR)
library(memoise)
##Set the API key
setwd("~/")
gl_auth("OPM.json")
#Translate!
gl_translate_ <- memoise(gl_translate)
gl_translate_delay <- function(text, source, target, delay) {
function (text) {
Sys.sleep(delay)
if(is.na(text)) {
NA_character_
} else {
gl_translate_(text, source = source, target = target)$translatedText
}
}
}
gl_translate_delay_3_sv_en <-gl_translate_delay("sv", "en", 3)
sweden_notr_2 <- sweden_notr %>% slice(1:20)
View(sweden_notr_2)
sweden_notr_2 <- map_chr(sweden_notr_2$message, gl_translate_delay_3_sv_en)
gl_translate_delay_3_sv_en <-gl_translate_delay("sv", "en", 3)
sweden_notr_2 <- sweden_notr %>% slice(1:20)
sweden_notr_2 <- map_chr(sweden_notr_2$message, gl_translate_delay_3_sv_en)
gl_translate_delay <- function(text, source, target, delay) {
function (text) {
Sys.sleep(delay)
if(is.na(text)) {
NA_character_
} else {
gl_translate_(text, source = source, target = target)$translatedText
}
}
}
gl_translate_delay_3_sv_en <-gl_translate_delay("sv", "en", 3)
sweden_notr_2 <- map_chr(sweden_notr_2$message, gl_translate_delay_3_sv_en)
View(sweden_notr)
gl_translate_delay <- function(source, target, delay) {
function (text) {
Sys.sleep(delay)
if(is.na(text)) {
NA_character_
} else {
gl_translate_(text, source = source, target = target)$translatedText
}
}
}
gl_translate_delay_3_sv_en <-gl_translate_delay("sv", "en", 3)
sweden_notr_2 <- map_chr(sweden_notr_2$message, gl_translate_delay_3_sv_en)
gl_translate_delay <- function(source, target, delay) {
f <- function (text) {
Sys.sleep(delay)
if(is.na(text)) {
NA_character_
} else {
gl_translate_(text, source = source, target = target)$translatedText
}
}
function(texts) map_chr(texts, f)
}
View(sweden_notr)
sweden_notr_2 <- sweden_notr %>% slice(which.max(nchar(.$message)))
View(sweden_notr_2)
View(sweden_notr)
View(sweden_notr_2)
sweden_notr_2$message[1]
sweden_notr_2 <- map_chr(sweden_notr_2$message, gl_translate_delay_3_sv_en)
sweden_notr_2 <- sweden_notr %>% slice(1:20)
sweden_notr_2 <- map_chr(sweden_notr_2$message, gl_translate_delay_3_sv_en)
sweden_notr_2 <- gl_translate_delay_3_sv_en(sweden_notr_2$message)
sweden_notr_2 <- sweden_notr %>% slice(1:20)
sweden_notr_2 <- gl_translate_delay_3_sv_en(sweden_notr_2$message)
sweden_notr_2 <- gl_translate_delay_3_sv_en(sweden_notr_2$message)
sweden_notr_2 <- sweden_notr %>% slice(1:20)
sweden_notr_3 <- gl_translate_delay_3_sv_en(sweden_notr_2$message)
sweden_notr_2 <- sweden_notr %>% slice(1:20)
View(sweden_notr_2)
gl_translate_delay <- function(source, target, delay) {
f <- function (text) {
Sys.sleep(delay)
if(is.na(text)) {
NA_character_
} else {
gl_translate_(text, source = source, target = target)$translatedText
}
}
function(texts) map_chr(texts, f)
}
gl_translate_delay_3_sv_en <- gl_translate_delay("sv", "en", 3)
sweden_notr_2 <- sweden_notr %>% slice(1:20)
sweden_notr_3 <- gl_translate_delay_3_sv_en(sweden_notr_2$message)
sweden_notr_4 <- gl_translate_delay_3_sv_en(sweden_notr_2$message)
View(sweden_notr)
sweden_notr_5 <- gl_translate_delay_3_sv_en(sweden_notr_2$message)
gl_translate_delay_3_sv_en <- gl_translate_delay("sv", "en", 0.5)
sweden_notr_6 <- gl_translate_delay_3_sv_en(sweden_notr_2$message)
##Create a cache
fc <- cache_filesystem("~/.cache")
#Translate!
gl_translate_ <- memoise(gl_translate, cache = fc)
View(fc)
##Create a cache
fc <- cache_filesystem("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/.cache")
fcb <- cache_filesystem("/tmp/cache")  # Obviouslly you don't wont persistent cache in tmp
f <- function(x) x
g <- memoise(f, cache = fc)
dir("/tmp/cache")
g(1)
##Create a cache
fc <- cache_filesystem("~/Dropbox (Tu equipo)/PhD thesis/General/Paper 1/.cache")
#Translate!
gl_translate_ <- memoise(gl_translate, cache = fc)
gl_translate_delay <- function(source, target, delay) {
f <- function (text) {
Sys.sleep(delay)
if(is.na(text)) {
NA_character_
} else {
gl_translate_(text, source = source, target = target)$translatedText
}
}
function(texts) map_chr(texts, f)
}
gl_translate_delay_3_sv_en <- gl_translate_delay("sv", "en", 0.5)
sweden_notr_final <- sweden_notr %>% mutate_at(.vars = vars(c(3, 10:25)),
.funs = funs(gl_translate_delay_3_sv_en))
sweden_notr_final <- sweden_notr %>% mutate_at(.vars = vars(c(3, 10:25)),
.funs = funs(gl_translate_delay_3_sv_en))
sweden_notr_final <- sweden_notr %>% mutate_at(.vars = vars(c(3, 10:25)),
.funs = funs(gl_translate_delay_3_sv_en))
install_github("ajparsons/everypoliticianR")
##Partido
library(devtools)
install_github("ajparsons/everypoliticianR")
Sys.getlocale()
```Sys.setlocale(category = "LC_ALL", locale = "en_US.UTF-8")```
Sys.setlocale(category = "LC_ALL", locale = "en_US.UTF-8")
##Partido
library(devtools)
install_github("ajparsons/everypoliticianR")
quit
quit()
load("/Users/ortega/Downloads/1d_model_stan.Rda")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/aloport.github.io")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
install.packages('prettydoc')
library(prettydoc)
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
