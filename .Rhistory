geom_vline(aes(xintercept=-6), color="yellow", linetype="solid")+
geom_vline(aes(xintercept=-5), color="yellow", linetype="solid")+
geom_text(aes(x = -6, label = "Debate RTVE", y=23),
hjust = "hjust", size= 7) +
geom_text(aes(x = -5, label = "Debate Atresmedia", y=27),
hjust = "hjust", size= 7) +
geom_line(aes(colour=party), size = 2) +
scale_color_manual(values = c("PSOE" = '#E9202C',
"PP" = '#0387D5',
"Ciudadanos" ="#FA5000",
`Unidas Podemos` ="#672F6C",
"VOX"  ="#32CD32")) +
geom_point(size = 2) +
geom_text(aes(x = 0, label = paste(party, round(vote,2), sep="\n")),
hjust = "hjust", size= 7) +
transition_reveal(daytoelect) +
coord_cartesian(clip = 'off')  +
labs(title= "¿Cuál será el resultado electoral del 28A?", subtitle = 'Predicciones basadas en aloport.github.io/predi, 25 de abril de 2019',
y = 'Resultados estimados', x = 'Días para las elecciones', caption = "@bertous") +
theme_minimal() +
theme(text = element_text(size=18), plot.margin = margin(5.5, 40, 5.5, 10.5), legend.position='none')
animate(anim_voto, width = 900, height = 600,
end_pause = 35,
fps = 10, rewind = FALSE, duration = 15, renderer = gifski_renderer("voto_2504.gif"))
intrapolation_gather_f <-  intrapolation_gather %>%
filter(datetime >= as.Date("2019-04-14")) %>%
rename(UP=`Unidas Podemos`, Cs=Ciudadanos)
intrapolation_gather_f <-  intrapolation_gather %>%
filter(datetime >= as.Date("2019-04-14")) %>%
recode(party, UP=`Unidas Podemos`, Cs=Ciudadanos)
intrapolation_gather_f <-  intrapolation_gather %>%
filter(datetime >= as.Date("2019-04-14")) %>%
recode(party, `Unidas Podemos`="UP", Ciudadanos="Cs")
intrapolation_gather <- intrapolation_reduce %>%
select(datetime, UP= "up", VOX="vox", Cs="cs", PP="pp", PSOE="psoe") %>%
gather("party", "vote", c(`Unidas Podemos`:'PSOE'))
intrapolation_gather <- intrapolation_reduce %>%
select(datetime, UP= "up", VOX="vox", Cs="cs", PP="pp", PSOE="psoe") %>%
gather("party", "vote", c(`Unidas Podemos`:'PSOE'))
intrapolation_gather <- intrapolation_reduce %>%
select(datetime, UP= "up", VOX="vox", Cs="cs", PP="pp", PSOE="psoe") %>%
gather("party", "vote", c('UP':'PSOE'))
intrapolation_gather_f <-  intrapolation_gather %>%
filter(datetime >= as.Date("2019-04-14"))
anim_voto <-  intrapolation_gather_f %>%
ggplot(aes(daytoelect, vote, group = party)) +
scale_x_continuous(breaks=(c(-14, -13, -12, -11, -10, -9, -8, -7, -6, -5 , -4, -3, -2, -1, 0)))+
geom_segment(aes(xend = 0, yend = vote),
linetype = 2, colour = 'grey') +
geom_vline(aes(xintercept=-6), color="yellow", linetype="solid")+
geom_vline(aes(xintercept=-5), color="yellow", linetype="solid")+
geom_text(aes(x = -6, label = "Debate RTVE", y=23),
hjust = "hjust", size= 7) +
geom_text(aes(x = -5, label = "Debate Atresmedia", y=27),
hjust = "hjust", size= 7) +
geom_line(aes(colour=party), size = 2) +
scale_color_manual(values = c("PSOE" = '#E9202C',
"PP" = '#0387D5',
"Cs" ="#FA5000",
"UP" ="#672F6C",
"VOX"  ="#32CD32")) +
geom_point(size = 2) +
geom_text(aes(x = 0, label = paste(party, round(vote,2), sep=",")),
hjust = "hjust", size= 7) +
transition_reveal(daytoelect) +
coord_cartesian(clip = 'off')  +
labs(title= "¿Cuál será el resultado electoral del 28A?", subtitle = 'Predicciones basadas en aloport.github.io/predi, 25 de abril de 2019',
y = 'Resultados estimados', x = 'Días para las elecciones', caption = "@bertous") +
theme_minimal() +
theme(text = element_text(size=18), plot.margin = margin(5.5, 40, 5.5, 10.5), legend.position='none')
animate(anim_voto, width = 900, height = 600,
end_pause = 35,
fps = 10, rewind = FALSE, duration = 15, renderer = gifski_renderer("voto_2504.gif"))
animate(anim_voto, width = 900, height = 600,
end_pause = 35,
fps = 10, rewind = FALSE, duration = 15, renderer = gifski_renderer("voto_2504.gif"))
View(intrapolation_gather_f)
intrapolation_gather_f %>%
ggplot(aes(daytoelect, vote, group = party)) +
scale_x_continuous(breaks=(c(-14, -13, -12, -11, -10, -9, -8, -7, -6, -5 , -4, -3, -2, -1, 0)))+
geom_segment(aes(xend = 0, yend = vote),
linetype = 2, colour = 'grey') +
geom_vline(aes(xintercept=-6), color="yellow", linetype="solid")+
geom_vline(aes(xintercept=-5), color="yellow", linetype="solid")+
geom_text(aes(x = -6, label = "Debate RTVE", y=23),
hjust = "hjust", size= 7) +
geom_text(aes(x = -5, label = "Debate Atresmedia", y=27),
hjust = "hjust", size= 7) +
geom_line(aes(colour=party), size = 2) +
scale_color_manual(values = c("PSOE" = '#E9202C',
"PP" = '#0387D5',
"Cs" ="#FA5000",
"UP" ="#672F6C",
"VOX"  ="#32CD32"))
View(intrapolation_gather_f)
intrapolation_gather
View(intrapolation_gather)
intrapolation_gather$electiondate <- "2019-04-28"
intrapolation_gather$daytoelect <- as.Date(intrapolation_gather$electiondate, "%Y-%m-%d")- as.Date(intrapolation_gather$datetime, "%Y-%m-%d")
intrapolation_gather$daytoelect <- -1*intrapolation_gather$daytoelect
intrapolation_gather_f <-  intrapolation_gather %>%
filter(datetime >= as.Date("2019-04-14"))
anim_voto <-  intrapolation_gather_f %>%
ggplot(aes(daytoelect, vote, group = party)) +
scale_x_continuous(breaks=(c(-14, -13, -12, -11, -10, -9, -8, -7, -6, -5 , -4, -3, -2, -1, 0)))+
geom_segment(aes(xend = 0, yend = vote),
linetype = 2, colour = 'grey') +
geom_vline(aes(xintercept=-6), color="yellow", linetype="solid")+
geom_vline(aes(xintercept=-5), color="yellow", linetype="solid")+
geom_text(aes(x = -6, label = "Debate RTVE", y=23),
hjust = "hjust", size= 7) +
geom_text(aes(x = -5, label = "Debate Atresmedia", y=27),
hjust = "hjust", size= 7) +
geom_line(aes(colour=party), size = 2) +
scale_color_manual(values = c("PSOE" = '#E9202C',
"PP" = '#0387D5',
"Cs" ="#FA5000",
"UP" ="#672F6C",
"VOX"  ="#32CD32")) +
geom_point(size = 2) +
geom_text(aes(x = 0, label = paste(party, round(vote,2), sep=",")),
hjust = "hjust", size= 7) +
transition_reveal(daytoelect) +
coord_cartesian(clip = 'off')  +
labs(title= "¿Cuál será el resultado electoral del 28A?", subtitle = 'Predicciones basadas en aloport.github.io/predi, 25 de abril de 2019',
y = 'Resultados estimados', x = 'Días para las elecciones', caption = "@bertous") +
theme_minimal() +
theme(text = element_text(size=18), plot.margin = margin(5.5, 40, 5.5, 10.5), legend.position='none')
animate(anim_voto, width = 900, height = 600,
end_pause = 35,
fps = 10, rewind = FALSE, duration = 15, renderer = gifski_renderer("voto_2504.gif"))
generales_gather$electiondate <- "2019-04-28"
generales_gather$daytoelect <- as.Date(generales_gather$electiondate, "%Y-%m-%d")- as.Date(generales_gather$datetime, "%Y-%m-%d")
generales_gather$daytoelect <- -1*generales_gather$daytoelect
View(generales_gather)
generales_gather_f <-  generales_gather %>%
filter(datetime >= as.Date("2019-04-14"))
View(generales_gather)
anim_generales <-  generales_gather_f %>%
ggplot(aes(daytoelect, prob, group = type)) +
scale_x_continuous(breaks=(c(-14, -13, -12, -11, -10, -9, -8, -7, -6, -5 , -4, -3, -2, -1, 0)))+
geom_segment(aes(xend = 0, yend = vote),
linetype = 2, colour = 'grey') +
geom_vline(aes(xintercept=-6), color="yellow", linetype="solid")+
geom_vline(aes(xintercept=-5), color="yellow", linetype="solid")+
geom_text(aes(x = -6, label = "Debate RTVE", y=23),
hjust = "hjust", size= 7) +
geom_text(aes(x = -5, label = "Debate Atresmedia", y=27),
hjust = "hjust", size= 7) +
geom_line(aes(colour=type), size = 2) +
scale_color_manual(values = c(`Coalición de izquierda`= '#9A0000',
`Coalición de derecha` = '#0000BA',
`Coalición de centro`="#C57420",
`Monocolor de izquierda`="#FF3827",
`Monocolor de derecha`="#FF9300",
`Monocolor de centro`="#04AAFF",
`Repetición electoral`= "#A9A9A9"
)) +
geom_segment(aes(xend = 0, yend = prob),
linetype = 2, colour = 'grey') +
geom_point(size = 2) +
geom_text(aes(x = 0, label = paste(type, round(prob,2), sep="\n")),
hjust = "hjust", size= 5) +
transition_reveal(daytoelect) +
coord_cartesian(clip = 'off') +
labs(title= "¿Cuál será el gobierno resultante del 28A?", subtitle = 'Predicciones basadas en aloport.github.io/predi, 25 de abril de 2019',
y = 'Resultados estimados', x = 'Días para las elecciones', caption = "@bertous") +
theme_minimal() +
theme(text = element_text(size=18), plot.margin = margin(5.5, 40, 5.5, 10.5), legend.position='none')
animate(anim_generales, width = 900, height = 600,
end_pause = 35,
fps = 10, rewind = FALSE, duration = 15, renderer = gifski_renderer("gobiernoresultante_2504.gif"))
anim_generales <-  generales_gather_f %>%
ggplot(aes(daytoelect, prob, group = type)) +
scale_x_continuous(breaks=(c(-14, -13, -12, -11, -10, -9, -8, -7, -6, -5 , -4, -3, -2, -1, 0)))+
geom_segment(aes(xend = 0, yend = prob),
linetype = 2, colour = 'grey') +
geom_vline(aes(xintercept=-6), color="yellow", linetype="solid")+
geom_vline(aes(xintercept=-5), color="yellow", linetype="solid")+
geom_text(aes(x = -6, label = "Debate RTVE", y=23),
hjust = "hjust", size= 7) +
geom_text(aes(x = -5, label = "Debate Atresmedia", y=27),
hjust = "hjust", size= 7) +
geom_line(aes(colour=type), size = 2) +
scale_color_manual(values = c(`Coalición de izquierda`= '#9A0000',
`Coalición de derecha` = '#0000BA',
`Coalición de centro`="#C57420",
`Monocolor de izquierda`="#FF3827",
`Monocolor de derecha`="#FF9300",
`Monocolor de centro`="#04AAFF",
`Repetición electoral`= "#A9A9A9"
)) +
geom_segment(aes(xend = 0, yend = prob),
linetype = 2, colour = 'grey') +
geom_point(size = 2) +
geom_text(aes(x = 0, label = paste(type, round(prob,2), sep="\n")),
hjust = "hjust", size= 5) +
transition_reveal(daytoelect) +
coord_cartesian(clip = 'off') +
labs(title= "¿Cuál será el gobierno resultante del 28A?", subtitle = 'Predicciones basadas en aloport.github.io/predi, 25 de abril de 2019',
y = 'Resultados estimados', x = 'Días para las elecciones', caption = "@bertous") +
theme_minimal() +
theme(text = element_text(size=18), plot.margin = margin(5.5, 40, 5.5, 10.5), legend.position='none')
animate(anim_generales, width = 900, height = 600,
end_pause = 35,
fps = 10, rewind = FALSE, duration = 15, renderer = gifski_renderer("gobiernoresultante_2504.gif"))
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi.io")
#render your sweet site.
rmarkdown::render_site()
# set some global options for the entire document
knitr::opts_chunk$set(echo = TRUE,
fig.width = 7, fig.height = 7)
library(quanteda)
library(quanteda.corpora)
setwd("/Users/ortega/Alberto/Alberto López Ortega/Side projects/S1 - Predi w Strijbis/Prediction markets/28A y 26M/")
predi28a <- read.csv("/Users/ortega/Alberto/Alberto López Ortega/Side projects/S1 - Predi w Strijbis/Prediction markets/28A y 26M/data/pricehistory-2019.04.26-09.55.csv")
predi28a <- predi28a %>%
separate(prices, c('contract1', 'contract2', 'contract3', 'contract4', 'contract5', 'contract6', 'contract7'), sep = ',') %>%
separate(time, c('weekday', 'monthday', 'yeartime'), sep= ',') %>%
mutate(datetime= mdy_hm(paste(monthday, yeartime, sep = ' '))) %>%
mutate_at(vars(contract1:contract7), funs(str_sub(., 20))) %>%
#remove the IDs from each contract
mutate_at(vars(contract1:contract7), funs(as.numeric)) %>%
mutate(market_id = ifelse(str_detect(market_id, "zSk5eS8p6PGZZ2MMa"), "28a_26", "other")) %>%
#change name of the market
mutate(set_id = ifelse(str_detect(set_id,  "KGezYwmZ2XKQ8JE8s"), "up_set",
#change the names of contractsets
ifelse(str_detect(set_id,  "jQuqN3mMzzA64p7ee"), "vox_set",
ifelse(str_detect(set_id, "c3np3bcBR8vHTK2cu"), "cs_set",
ifelse(str_detect(set_id, "P3g8GuWFdrgshsRzb"), "pp_set",
ifelse(str_detect(set_id, "bgwmJDWfJvoCv6ThE"), "psoe_set",
ifelse(str_detect(set_id, "wD6TZthrHCvBsA724"),
"generales_set", "other"))))))) %>%
filter(market_id== "28a_26" & set_id!= "other") %>%
#select only 28a_26m market > only 28A contractsets
select(datetime, set_id, c(contract1:contract7))
generales_set <-  predi28a %>%
filter(set_id== "generales_set") %>%
select(datetime, coalition_left= contract1, coalition_center= contract2, coalition_right= contract3,
singlecolor_left= contract4, singlecolor_center= contract5, singlecolor_right= contract6, rep_elections= contract7)
# Get specific group
up_set <- predi28a %>%
filter(set_id== "up_set")
#28A predi data
###Cleaning prediction market data
library(tidyverse)
library(lubridate)
library(ggplot2)
library(zoo)
library(DT)
library(highcharter)
library(ggrepel)
library(directlabels)
library(ggthemes)
setwd("/Users/ortega/Alberto/Alberto López Ortega/Side projects/S1 - Predi w Strijbis/Prediction markets/28A y 26M/")
predi28a <- read.csv("/Users/ortega/Alberto/Alberto López Ortega/Side projects/S1 - Predi w Strijbis/Prediction markets/28A y 26M/data/pricehistory-2019.04.26-09.55.csv")
predi28a <- predi28a %>%
separate(prices, c('contract1', 'contract2', 'contract3', 'contract4', 'contract5', 'contract6', 'contract7'), sep = ',') %>%
separate(time, c('weekday', 'monthday', 'yeartime'), sep= ',') %>%
mutate(datetime= mdy_hm(paste(monthday, yeartime, sep = ' '))) %>%
mutate_at(vars(contract1:contract7), funs(str_sub(., 20))) %>%
#remove the IDs from each contract
mutate_at(vars(contract1:contract7), funs(as.numeric)) %>%
mutate(market_id = ifelse(str_detect(market_id, "zSk5eS8p6PGZZ2MMa"), "28a_26", "other")) %>%
#change name of the market
mutate(set_id = ifelse(str_detect(set_id,  "KGezYwmZ2XKQ8JE8s"), "up_set",
#change the names of contractsets
ifelse(str_detect(set_id,  "jQuqN3mMzzA64p7ee"), "vox_set",
ifelse(str_detect(set_id, "c3np3bcBR8vHTK2cu"), "cs_set",
ifelse(str_detect(set_id, "P3g8GuWFdrgshsRzb"), "pp_set",
ifelse(str_detect(set_id, "bgwmJDWfJvoCv6ThE"), "psoe_set",
ifelse(str_detect(set_id, "wD6TZthrHCvBsA724"),
"generales_set", "other"))))))) %>%
filter(market_id== "28a_26" & set_id!= "other") %>%
#select only 28a_26m market > only 28A contractsets
select(datetime, set_id, c(contract1:contract7))
generales_set <-  predi28a %>%
filter(set_id== "generales_set") %>%
select(datetime, coalition_left= contract1, coalition_center= contract2, coalition_right= contract3,
singlecolor_left= contract4, singlecolor_center= contract5, singlecolor_right= contract6, rep_elections= contract7)
# Get specific group
up_set <- predi28a %>%
filter(set_id== "up_set")
up_set_long <- up_set %>%
# Get cumulative values
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'9' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'12' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'15' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'18' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
# Aggregate with 3 hour intervals
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
# Generate 10, 50, 90 probability series
up_intrapolation <- crossing(datetime = unique(up_set_long$datetime), probability=c(10, 50, 90)) %>%
# Merge it with original data
union_all(up_set_long) %>%
# Make sure that original value is preserved
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
# Sort
arrange(datetime, probability) %>%
# Create groups
group_by(datetime) %>%
# Add interpolations
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
## Name
select(-vote, up=vote_)
vox_set <- predi28a %>%
filter(set_id== "vox_set")
vox_set_long <- vox_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'6' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'9' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'12' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'15' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
vox_intrapolation <- crossing(datetime = unique(vox_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(vox_set_long) %>%
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
arrange(datetime, probability) %>%
group_by(datetime) %>%
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
select(-vote, vox=vote_)
cs_set <- predi28a %>%
filter(set_id== "cs_set")
cs_set_long <- cs_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'13' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'16' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'19' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'22' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
cs_intrapolation <- crossing(datetime = unique(cs_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(cs_set_long) %>%
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
arrange(datetime, probability) %>%
group_by(datetime) %>%
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
select(-vote, cs=vote_)
pp_set <- predi28a %>%
filter(set_id== "pp_set")
pp_set_long <- pp_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'17' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'20' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'23' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'26' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
pp_intrapolation <- crossing(datetime = unique(pp_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(pp_set_long) %>%
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
arrange(datetime, probability) %>%
group_by(datetime) %>%
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
select(-vote, pp=vote_)
psoe_set <- predi28a %>%
filter(set_id== "psoe_set")
psoe_set_long <- psoe_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'23' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'26' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'29' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'32' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
psoe_intrapolation <- crossing(datetime = unique(psoe_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(psoe_set_long) %>%
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
arrange(datetime, probability) %>%
group_by(datetime) %>%
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
select(-vote, psoe=vote_)
intrapolation_all <- full_join(up_intrapolation, vox_intrapolation, by = c("datetime", "probability")) %>%
full_join(., cs_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., pp_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., psoe_intrapolation, by=c('datetime', 'probability')) %>%
gather("party", "vote", c('up':'psoe')) %>%
distinct()
intrapolation_inner <- inner_join(up_intrapolation, vox_intrapolation, by = c("datetime", "probability")) %>%
inner_join(., cs_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., pp_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., psoe_intrapolation, by=c('datetime', 'probability')) %>%
distinct()
#####VOTO
intrapolation_reduce <- intrapolation_inner %>%
filter(probability=="50") %>%
select(-probability) %>%
ungroup() %>%
add_row(datetime= "2019-04-19",
up= 14.29,
vox= 12.83,
cs= 16.04,
pp= 21.13,
psoe= 29.59) %>%
mutate_at(vars(2:6), ~(.*96)/100) %>%
mutate_if(is.numeric, round, 2) %>%
mutate(datetime2 = as.Date(datetime, 'd%.m%.Y%')) %>%
arrange(datetime2)
intrapolation_little <- intrapolation_inner %>%
ungroup(datetime) %>%
filter(probability=="50") %>%
ungroup() %>%
add_row(datetime= "2019-04-19",
up= 14.29,
vox= 12.83,
cs= 16.04,
pp= 21.13,
psoe= 29.59) %>%
mutate_at(vars(3:7), ~(.*96)/100) %>%
mutate(datetime2 = as.Date(datetime, 'd%.m%.Y%')) %>%
arrange(datetime2) %>%
select(datetime2, `Unidas Podemos`= "up", VOX="vox", Ciudadanos="cs", PP="pp", PSOE="psoe") %>%
gather("party", "vote", c(`Unidas Podemos`:'PSOE')) %>%
group_by(party) %>%
mutate(diff = vote - lag(vote, default = first(vote))) %>%
filter(datetime2 == max(datetime2)) %>%
mutate_if(is.numeric, round, 2) %>%
select(party, vote, diff) %>%
arrange(desc(vote))
intrapolation_gather <- intrapolation_reduce %>%
select(datetime, UP= "up", VOX="vox", Cs="cs", PP="pp", PSOE="psoe") %>%
gather("party", "vote", c('UP':'PSOE'))
#GOBIERNO
generales_reduce <- generales_set %>%
mutate(datetime = round_date(datetime, unit="24 hours")) %>%
group_by(datetime) %>%
mutate_all(list(mean=mean)) %>%
select(-c(2:8)) %>%
distinct() %>%
select(coalition_left= coalition_left_mean,
coalition_center=coalition_center_mean,
coalition_right=coalition_right_mean,
singlecolor_left=singlecolor_left_mean,
singlecolor_center=singlecolor_center_mean,
singlecolor_right=singlecolor_right_mean,
repetition_elections=rep_elections_mean) %>%
mutate_if(is.numeric, round, 2) %>%
mutate(datetime2 = as.Date(datetime, 'd%.m%.Y%')) %>%
filter(datetime<"2019-04-27")
generales_little <- generales_reduce %>%
ungroup(datetime) %>%
select(datetime, `Gobierno de coalición de izquierdas`= "coalition_left", `Gobierno de coalición de centro`="coalition_center", `Gobierno de coalición de derechas`="coalition_right", `Gobierno monocolor de izquierdas`="singlecolor_left", `Gobierno monocolor de centro`="singlecolor_center", `Gobierno monocolor de derechas`="singlecolor_right", `Repetición de elecciones`="repetition_elections") %>%
gather("type", "prob", c(`Gobierno de coalición de izquierdas`:`Repetición de elecciones`)) %>%
mutate(diff =  prob - lag(prob, default = first(prob))) %>%
filter(datetime == max(datetime)) %>%
mutate_if(is.numeric, round, 2) %>%
select(type, prob, diff) %>%
arrange(desc(prob))
generales_gather <- generales_reduce %>% select(datetime, `Coalición de izquierda`= "coalition_left", `Coalición de centro`="coalition_center", `Coalición de derecha`="coalition_right", `Monocolor de izquierda`="singlecolor_left", `Monocolor de centro`="singlecolor_center", `Monocolor de derecha`="singlecolor_right", `Repetición electoral`="repetition_elections") %>%
gather("type", "prob", c(`Coalición de izquierda`:`Repetición electoral`))
###funcionamiento-ejemplo
`Contratos de voto al PP` <- c("Contrato A", "Contrato B", "Contrato C", "Contrato D", "Contrato E")
`Margen de estimación de voto al PP` <- c("17% votos o menos", "17%-19'99% votos", "20%-22'99% votos", "23%-25'99% votos", "26% votos o más")
`Probabilidad de cada contrato (ejemplo)` <- c("10%", "20%", "40%", "20%", "10%")
Ejemplo <- as.data.frame(cbind(`Contratos de voto al PP`, `Margen de estimación de voto al PP`, `Probabilidad de cada contrato (ejemplo)`))
`Estimación de voto al PP` <- c("100% de votos", "> 26% de votos", "> 23% de votos", "21% de votos", "> 20% de votos", "> 17% de votos", "> 0% de votos")
`Probabilidad acumulada` <- c("0%", "10%", "30%", "50%", "70%", "90%", "100%")
`Agregación` <- c("Ninguno",
"Contrato E",
"Contrato D + Contrato E",
"Resultado de la interpolación",
"Contrato C + Contrato D + Contrato E",
"Contrato B + Contrato C +  Contrato D + Contrato E",
"Contrato A + Contrato B + Contrato C + Contrato D + Contrato E")
Ejemplo_2 <- as.data.frame(cbind(`Estimación de voto al PP`, `Probabilidad acumulada`, `Agregación`))
x <- c(100, 26, 23, NA, 20, 17, 0)
y <- c(0, 10, 30, 50, 70, 90, 100)
Ejemplo_3 <- as.data.frame(cbind(x, y))
Ejemplo_3$vote_ = coalesce(as.numeric(x), na.approx(x, y))
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi.io")
#render your sweet site.
rmarkdown::render_site()
library(quanteda)
library(quanteda.corpora)
library(dplyr)
library(ggplot2)
