separate(prices, c('contract1', 'contract2', 'contract3', 'contract4', 'contract5', 'contract6', 'contract7'), sep = ',') %>%
separate(time, c('weekday', 'monthday', 'yeartime'), sep= ',') %>%
mutate(datetime= mdy_hm(paste(monthday, yeartime, sep = ' '))) %>%
mutate_at(vars(contract1:contract7), funs(str_sub(., 20))) %>%
#remove the IDs from each contract
mutate_at(vars(contract1:contract7), funs(as.numeric)) %>%
mutate(market_id = ifelse(str_detect(market_id, "zSk5eS8p6PGZZ2MMa"), "28a_26", "other")) %>%
#change name of the market
mutate(set_id = ifelse(str_detect(set_id,  "KGezYwmZ2XKQ8JE8s"), "up_set",
#change the names of contractsets
ifelse(str_detect(set_id,  "jQuqN3mMzzA64p7ee"), "vox_set",
ifelse(str_detect(set_id, "c3np3bcBR8vHTK2cu"), "cs_set",
ifelse(str_detect(set_id, "P3g8GuWFdrgshsRzb"), "pp_set",
ifelse(str_detect(set_id, "bgwmJDWfJvoCv6ThE"), "psoe_set",
ifelse(str_detect(set_id, "wD6TZthrHCvBsA724"),
"generales_set", "other"))))))) %>%
filter(market_id== "28a_26" & set_id!= "other") %>%
#select only 28a_26m market > only 28A contractsets
select(datetime, set_id, c(contract1:contract7))
generales_set <-  predi28a %>%
filter(set_id== "generales_set") %>%
select(datetime, coalition_left= contract1, coalition_center= contract2, coalition_right= contract3,
singlecolor_left= contract4, singlecolor_center= contract5, singlecolor_right= contract6, rep_elections= contract7)
generales_set %>%
gather("coalition", "probability", c(2:7)) %>%
ggplot(aes(x=as.Date(datetime, "%y-%m-%d"),
y=probability,
color=coalition))+ geom_smooth(span=0.2)
# Get specific group
up_set <- predi28a %>%
filter(set_id== "up_set")
up_set_long <- up_set %>%
# Get cumulative values
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'9' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'12' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'15' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'18' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
# Aggregate with 3 hour intervals
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
# Generate 10, 50, 90 probability series
up_intrapolation <- crossing(datetime = unique(up_set_long$datetime), probability=c(10, 50, 90)) %>%
# Merge it with original data
union_all(up_set_long) %>%
# Make sure that original value is preserved
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
# Sort
arrange(datetime, probability) %>%
# Create groups
group_by(datetime) %>%
# Add interpolations
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
## Name
select(-vote, up=vote_)
vox_set <- predi28a %>%
filter(set_id== "vox_set")
vox_set_long <- vox_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'6' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'9' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'12' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'15' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
vox_intrapolation <- crossing(datetime = unique(vox_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(vox_set_long) %>%
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
arrange(datetime, probability) %>%
group_by(datetime) %>%
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
select(-vote, vox=vote_)
cs_set <- predi28a %>%
filter(set_id== "cs_set")
cs_set_long <- cs_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'13' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'16' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'19' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'22' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
cs_intrapolation <- crossing(datetime = unique(cs_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(cs_set_long) %>%
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
arrange(datetime, probability) %>%
group_by(datetime) %>%
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
select(-vote, cs=vote_)
pp_set <- predi28a %>%
filter(set_id== "pp_set")
pp_set_long <- pp_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'17' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'20' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'23' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'26' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
pp_intrapolation <- crossing(datetime = unique(pp_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(pp_set_long) %>%
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
arrange(datetime, probability) %>%
group_by(datetime) %>%
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
select(-vote, pp=vote_)
psoe_set <- predi28a %>%
filter(set_id== "psoe_set")
psoe_set_long <- psoe_set %>%
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'23' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'26' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'29' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'32' = contract1,
'100'= 0) %>%
gather("vote", "probability", -datetime, convert = TRUE) %>%
group_by(datetime, vote) %>%
summarise(probability = mean(probability))
psoe_intrapolation <- crossing(datetime = unique(psoe_set_long$datetime), probability=c(10, 50, 90)) %>%
union_all(psoe_set_long) %>%
group_by(datetime, probability) %>%
summarise(vote = first(vote)) %>%
arrange(datetime, probability) %>%
group_by(datetime) %>%
mutate(vote_ = coalesce(as.numeric(vote), na.approx(vote, probability))) %>%
select(-vote, psoe=vote_)
intrapolation_all <- full_join(up_intrapolation, vox_intrapolation, by = c("datetime", "probability")) %>%
full_join(., cs_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., pp_intrapolation, by=c('datetime', 'probability')) %>%
full_join(., psoe_intrapolation, by=c('datetime', 'probability')) %>%
gather("party", "vote", c('up':'psoe')) %>%
distinct()
intrapolation_inner <- inner_join(up_intrapolation, vox_intrapolation, by = c("datetime", "probability")) %>%
inner_join(., cs_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., pp_intrapolation, by=c('datetime', 'probability')) %>%
inner_join(., psoe_intrapolation, by=c('datetime', 'probability')) %>%
distinct()
intrapolation_reduce <- intrapolation_inner %>%
filter(probability=="50") %>%
select(-probability)
write.csv(generales_set, "data/generales_set.csv") #Clean & updated results from General Elections' contractset
write.csv(intrapolation_reduce, "data/predi_parties.csv") #Clean, combined & updated results from  Parties' contractset
####graph all interpolations
transmute(
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'9' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'12' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'15' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'18' = contract1,
'100'= 0) %>%
intrapolation_reduce %>%
gather("party", "vote", c('up':'psoe')) %>%
ggplot(aes(datetime,
y=vote,
color=party))+
geom_line() + geom_point(alpha = 0.4) +
scale_colour_manual(values = c("cs"="orange","vox"= "#32CD32","up"="purple", "psoe"="red", "pp"="#1796f6"))+
scale_y_continuous(name="Vote shares", limits=c(0, 30))
#graph all data points
intrapolation_all %>%
filter(datetime >= as.Date("2019-03-13")) %>%
ggplot(aes(probability, vote, group = party, color = party)) +
facet_wrap(~ lubridate::round_date(datetime, "1 day")) +
geom_point(aes(probability, vote))
intrapolation_inner %>%
filter(datetime >= as.Date("2019-03-13")) %>%
gather("party", "vote", c('up':'psoe')) %>%
distinct() %>%
ggplot(aes(probability, vote, group = party, color = party)) +
facet_wrap(~ lubridate::round_date(datetime, "1 day")) +
geom_line() +
geom_point(aes(probability, vote))
datetime = lubridate::round_date(datetime, unit="24 hours"),
'0' = 100,
'9' = select(., contract4:contract1) %>% rowSums(na.rm = TRUE),
'12' = select(., contract3:contract1) %>% rowSums(na.rm = TRUE),
'15' = select(., contract2:contract1) %>% rowSums(na.rm = TRUE),
'18' = contract1,
'100'= 0) %>%
intrapolation_reduce %>%
gather("party", "vote", c('up':'psoe')) %>%
ggplot(aes(datetime,
y=vote,
color=party))+
geom_line() + geom_point(alpha = 0.4) +
scale_colour_manual(values = c("cs"="orange","vox"= "#32CD32","up"="purple", "psoe"="red", "pp"="#1796f6"))+
scale_y_continuous(name="Vote shares", limits=c(0, 30))
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/aloport.github.io")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
generales_set %>%
gather("coalition", "probability", c(2:7)) %>%
ggplot(aes(x=as.Date(datetime, "%y-%m-%d"),
y=probability,
color=coalition))+ geom_smooth(span=0.2)
generales_set %>%
gather("coalition", "probability", c(2:7)) %>%
ggplot(aes(x=as.Date(datetime, "%y-%m-%d"),
y=probability,
color=coalition))+ geom_line())
generales_set %>%
gather("coalition", "probability", c(2:7)) %>%
ggplot(aes(x=as.Date(datetime, "%y-%m-%d"),
y=probability,
color=coalition))+ geom_line()
generales_set %>%
gather("coalition", "probability", c(2:7)) %>%
distinct() %>%
ggplot(aes(x=as.Date(datetime, "%y-%m-%d"),
y=probability,
color=coalition))+ geom_line()
View(generales_set)
generales_set %>%
gather("coalition", "probability", c(2:7)) %>%
ggplot(aes(x=as.Date( lubridate::round_date(datetime, "1 day")),
y=probability,
color=coalition))+ geom_line()
generales_set %>%
gather("coalition", "probability", c(2:7)) %>%
ggplot(aes(x=as.Date(datetime, "%y-%m-%d"),
y=probability,
color=coalition))+ geom_smooth(span=0.2)
View(generales_set)
generales_set %>%
lubridate::round_date(datetime, "1 day"))
generales_set %>%
lubridate::round_date(datetime, "1 day")
View(generales_set)
generales_set %>%
mutate(date = round_date(datetime, "1 day"))
tets <- generales_set %>%
mutate(date = round_date(datetime, "1 day"))
View(tets)
library(dplyr)
library(stringr)
library(purrr)
n <- 5
set.seed(123)
colors <- c("#d35400", "#2980b9", "#2ecc71", "#f1c40f", "#2c3e50", "#7f8c8d")
colors2 <- c("#000004", "#3B0F70", "#8C2981", "#DE4968", "#FE9F6D", "#FCFDBF")
df <- data.frame(x = seq_len(n) - 1) %>%
mutate(
y = 10 + x + 10 * sin(x),
y = round(y, 1),
z = (x*y) - median(x*y),
e = 10 * abs(rnorm(length(x))) + 2,
e = round(e, 1),
low = y - e,
high = y + e,
value = y,
name = sample(fruit[str_length(fruit) <= 5], size = n),
color = rep(colors, length.out = n),
segmentColor = rep(colors2, length.out = n)
)
df
create_hc <- function(t) {
dont_rm_high_and_low <- c("arearange", "areasplinerange",
"columnrange", "errorbar")
is_polar <- str_detect(t, "polar")
t <- str_replace(t, "polar", "")
if(!t %in% dont_rm_high_and_low) df <- df %>% select(-e, -low, -high)
highchart() %>%
hc_title(text = paste(ifelse(is_polar, "polar ", ""), t),
style = list(fontSize = "15px")) %>%
hc_chart(type = t,
polar = is_polar) %>%
hc_xAxis(categories = df$name) %>%
hc_add_series(df, name = "Fruit Consumption", showInLegend = FALSE)
}
create_hc <- function(t) {
dont_rm_high_and_low <- c("arearange", "areasplinerange",
"columnrange", "errorbar")
is_polar <- str_detect(t, "polar")
t <- str_replace(t, "polar", "")
if(!t %in% dont_rm_high_and_low) df <- df %>% select(-e, -low, -high)
highchart() %>%
hc_title(text = paste(ifelse(is_polar, "polar ", ""), t),
style = list(fontSize = "15px")) %>%
hc_chart(type = t,
polar = is_polar) %>%
hc_xAxis(categories = df$name) %>%
hc_add_series(df, name = "Fruit Consumption", showInLegend = FALSE)
}
hcs <- c("line", "spline",  "area", "areaspline",
"column", "bar", "waterfall" , "funnel", "pyramid",
"pie" , "treemap", "scatter", "bubble",
"arearange", "areasplinerange", "columnrange", "errorbar",
"polygon", "polarline", "polarcolumn", "polarcolumnrange",
"coloredarea", "coloredline")  %>%
map(create_hc)
install.packages('highchart')
install.packages('highcharter')
library(highcharter)
n <- 5
set.seed(123)
colors <- c("#d35400", "#2980b9", "#2ecc71", "#f1c40f", "#2c3e50", "#7f8c8d")
colors2 <- c("#000004", "#3B0F70", "#8C2981", "#DE4968", "#FE9F6D", "#FCFDBF")
df <- data.frame(x = seq_len(n) - 1) %>%
mutate(
y = 10 + x + 10 * sin(x),
y = round(y, 1),
z = (x*y) - median(x*y),
e = 10 * abs(rnorm(length(x))) + 2,
e = round(e, 1),
low = y - e,
high = y + e,
value = y,
name = sample(fruit[str_length(fruit) <= 5], size = n),
color = rep(colors, length.out = n),
segmentColor = rep(colors2, length.out = n)
)
create_hc <- function(t) {
dont_rm_high_and_low <- c("arearange", "areasplinerange",
"columnrange", "errorbar")
is_polar <- str_detect(t, "polar")
t <- str_replace(t, "polar", "")
if(!t %in% dont_rm_high_and_low) df <- df %>% select(-e, -low, -high)
highchart() %>%
hc_title(text = paste(ifelse(is_polar, "polar ", ""), t),
style = list(fontSize = "15px")) %>%
hc_chart(type = t,
polar = is_polar) %>%
hc_xAxis(categories = df$name) %>%
hc_add_series(df, name = "Fruit Consumption", showInLegend = FALSE)
}
hcs <- c("line", "spline",  "area", "areaspline",
"column", "bar", "waterfall" , "funnel", "pyramid",
"pie" , "treemap", "scatter", "bubble",
"arearange", "areasplinerange", "columnrange", "errorbar",
"polygon", "polarline", "polarcolumn", "polarcolumnrange",
"coloredarea", "coloredline")  %>%
map(create_hc)
#render your sweet site.
rmarkdown::render_site()
hcs <- c("line")  %>%
map(create_hc)
#render your sweet site.
rmarkdown::render_site()
library(magrittr)
library(highcharter)
highchart() %>%
hc_title(text = "Scatter chart with size and color") %>%
hc_add_series_scatter(mtcars$wt, mtcars$mpg,
mtcars$drat, mtcars$hp)
highchart() %>%
hc_title(text = "Scatter chart with size and color") %>%
hc_add_series(mtcars$wt, mtcars$mpg,
mtcars$drat, mtcars$hp)
library(magrittr)
library(highcharter)
highchart() %>%
hc_title(text = "Scatter chart with size and color") %>%
hc_add_series(mtcars$wt, mtcars$mpg,
mtcars$drat, mtcars$hp)
library(ggplot2)
library(plotly)
p <- ggplot(data = diamonds, aes(x = cut, fill = clarity)) +
geom_bar(position = "dodge")
ggplotly(p)
#render your sweet site.
rmarkdown::render_site()
p <- intrapolation_reduce %>%
gather("party", "vote", c('up':'psoe')) %>%
ggplot(aes(datetime,
y=vote,
color=party))+
geom_line() + geom_point(alpha = 0.4) +
scale_colour_manual(values = c("cs"="orange","vox"= "#32CD32","up"="purple", "psoe"="red", "pp"="#1796f6"))+
scale_y_continuous(name="Vote shares", limits=c(0, 30))
ggplotly(p)
#render your sweet site.
rmarkdown::render_site()
install.packages('networkD3')
library(networkD3)
data(MisLinks, MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source",
Target = "target", Value = "value", NodeID = "name",
Group = "group", opacity = 0.4)
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi.io")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("/Users/ortega/Desktop/website/predi.io")
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
#render your sweet site.
rmarkdown::render_site()
devtools::install_github("hadley/emo")
